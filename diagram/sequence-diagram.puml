@startuml

skinparam sequence {
    ArrowColor DeepPink
    ActorBorderColor DeepPink
    LifeLineBorderColor DeepPink
    LifeLineBackgroundColor #ffe4e1
    
    ParticipantBorderColor DeepPink
    ParticipantBackgroundColor #ffe4e1
    ParticipantFontColor DeepPink
    
    ActorBackgroundColor #ffe4e1
    ActorFontColor DeepPink
}

title Weight Calculation System

actor User
participant Browser
participant AuthController
participant Session
participant CalculateController
participant DB

== Login Process ==

User -> Browser: Enter email/password
Browser -> AuthController: POST /login

AuthController -> DB: Query user by email
DB --> AuthController: Return user data

alt Invalid Credentials
    AuthController --> Browser: Return 401 Unauthorized
    Browser --> User: Show error message
else Valid Credentials
    AuthController -> DB: Delete existing sessions
    AuthController -> Session: Create new session
    Session --> AuthController: Return session ID
    AuthController -> AuthController: Set session cookie
    AuthController --> Browser: Return success response
    Browser --> User: Redirect to dashboard
end

== Entry Weight Process ==

User -> Browser: Access calculation page
Browser -> CalculateController: GET /calculate
CalculateController --> Browser: Return calculation form

User -> Browser: Fill entry data\n(ticket, vehicle, weight, etc)
Browser -> CalculateController: POST /calculate

CalculateController -> CalculateController: Round entry weight to nearest 10\n(roundToNearest10)

CalculateController -> DB: Insert calculation record with rounded entry weight
DB --> CalculateController: Return calculation ID
CalculateController --> Browser: Return success response
Browser --> User: Show success message

== Exit Weight & Calculation Process ==

User -> Browser: Input exit weight
Browser -> CalculateController: PUT /calculate/{id}

CalculateController -> CalculateController: Round exit weight to nearest 10\n(roundToNearest10)
CalculateController -> CalculateController: Calculate weight difference\n(rounded_entry - rounded_exit)

alt Weight Difference >= 1000
    CalculateController -> CalculateController: roundedWeight = floor(weightDiff/100) * 100
else Weight Difference >= 100
    CalculateController -> CalculateController: roundedWeight = floor(weightDiff/10) * 10
else Weight Difference < 100
    CalculateController -> CalculateController: roundedWeight = floor(weightDiff)
end

CalculateController -> CalculateController: Calculate total price\n(roundedWeight * price_per_kg)

CalculateController -> DB: Update calculation with:\n- rounded_exit_weight\n- weight_difference\n- rounded_weight\n- total_price\n- exit_datetime
DB --> CalculateController: Confirm update

CalculateController --> Browser: Return calculation result
Browser -> Browser: Display results:\n- Weight Difference\n- Rounded Weight\n- Price per KG\n- Total Price
Browser --> User: Show final calculation

== History Process ==

User -> Browser: Access history page
Browser -> CalculateController: GET /calculate/history

CalculateController -> DB: Select all calculations
DB --> CalculateController: Return calculations list

CalculateController --> Browser: Return history page with data
Browser --> User: Display calculation history

@enduml
