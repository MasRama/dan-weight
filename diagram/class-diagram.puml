@startuml

skinparam class {
    BackgroundColor #FEFECE
    BorderColor DeepPink
    ArrowColor DeepPink
}

class User {
    -id: integer
    -nama: string
    -email: string
    -password: string
    -created_at: timestamp
    -updated_at: timestamp
    +login(): boolean
    +register(): void
}

class Session {
    -id: string
    -user_id: integer
    -token: string
    -expires_at: timestamp
    -created_at: timestamp
    +create(): void
    +validate(): boolean
    +destroy(): void
}

class Calculation {
    -id: integer
    -ticket_number: string
    -vehicle_number: string
    -driver_name: string
    -owner_name: string
    -entry_weight: decimal
    -exit_weight: decimal
    -price_per_kg: decimal
    -net_weight: decimal
    -total_price: decimal
    -entry_datetime: bigint
    -exit_datetime: bigint
    -user_id: integer
    -types: string
    -created_at: timestamp
    +generateTicketNumber(): string
    +calculateNetWeight(): decimal
    +calculateTotalPrice(): decimal
    +saveEntry(): void
    +updateExit(): void
}

class ArduinoService {
    -websocket: WebSocket
    -isConnected: boolean
    -minWeightThreshold: number
    +initializeConnection(): void
    +connect(): Promise<boolean>
    +disconnect(): void
    +readWeight(): Promise<number>
    +validateWeight(weight: number): boolean
    +onWeightReceived(callback: function): void
}

class DashboardController {
    +showDashboard(request, response): Promise<void>
    +showLandingPage(request, response): Promise<void>
}

class AuthController {
    +showLoginForm(request, response): Promise<void>
    +showRegisterForm(request, response): Promise<void>
    +login(request, response): Promise<void>
    +register(request, response): Promise<void>
    +logout(request, response): Promise<void>
}

class CalculateController {
    +showCalculationForm(request, response): Promise<void>
    +processEntry(request, response): Promise<void>
    +processExit(request, response): Promise<void>
    +showHistory(request, response): Promise<void>
    +clearHistory(request, response): Promise<void>
}

class WeightService {
    -arduinoService: ArduinoService
    +initializeArduino(): Promise<void>
    +getCurrentWeight(): Promise<number>
    +validateWeight(weight: number): boolean
    +calculatePrice(weight: number, pricePerKg: number): decimal
}

class Database {
    +connect(): Promise<void>
    +query(sql: string, params: array): Promise<any>
    +transaction(): Promise<Transaction>
}

class AuthMiddleware {
    +validateSession(request, response, next): Promise<void>
}

' Relationships
User "1" -- "0..*" Session : has
User "1" -- "0..*" Calculation : owns
Session "1" -- "1" User : authenticates

AuthController ..> User : manages
AuthController ..> Session : manages
DashboardController ..> Session : validates
CalculateController ..> Calculation : manages
CalculateController ..> WeightService : uses
WeightService ..> ArduinoService : uses

AuthController ..> Database : uses
CalculateController ..> Database : uses
DashboardController ..> Database : uses

AuthMiddleware ..> Session : validates
AuthMiddleware ..> User : authenticates

@enduml
